// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  role            String?          @default("STUDENT") @db.String
  username        String           @unique
  email           String           @unique
  password        String
  name            String           @default("") @map("_name")
  lessons         Lesson[]
  // sessions                  Session[]
  //collection id or something? idk
  knowledgePoints knowledgePoint[] @relation("UserToKnowledgePoint")

  @@map("users")
}

model knowledgePoint {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  uid             User      @relation("UserToKnowledgePoint", fields: [userId], references: [id])
  userId          String    @map("_userId") @db.ObjectId
  pointInSolitude String    @map("_pointInSolitude")
  pointInChain    String    @map("_pointInChain")
  source          kpSource  @map("_source")
  TwoDCoOrdinates Float[]   @map("_TwoDCoOrdinates")
  vectorEmbedding Float[]   @map("_vectorEmbedding")
  confidence      Int       @map("_confidence")
  meta            metadata? @relation("MetadataToKnowledgePointChain", fields: [metadataId], references: [id])
  metadataId      String?   @db.ObjectId
  // linksTo         String[]

  @@map("knowledgePoints")
}

enum kpSource {
  reinforced
  offered
}

model Feedback {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  userId  String @db.ObjectId // User ID

  @@map("feedbacks")
}

model Lesson {
  id      String      @id @default(auto()) @map("_id") @db.ObjectId
  ls      lessonState @relation("LessonToLessonState", fields: [stateId], references: [id])
  stateId String      @unique @db.ObjectId
  beganAt DateTime    @default(now())
  endedAt DateTime?
  user    User        @relation(fields: [userId], references: [id])
  userId  String      @db.ObjectId

  @@map("lessons")
}

model lessonState {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  newMessages Message[] @relation("LessonStateToMessage")
  oldMessages Message[] @relation("LessonStateToOldMessage")
  metadata    metadata  @relation("LessonStateToMetadata", fields: [metadataId], references: [id])
  metadataId  String    @unique @db.ObjectId
  Lesson      Lesson?   @relation("LessonToLessonState")

  @@map("lessonStates")
}

model metadata {
  id                         String           @id @default(auto()) @map("_id") @db.ObjectId
  lessonState                lessonState?     @relation("LessonStateToMetadata")
  threads                    Json[]
  subjects                   String[]
  knowledgePointChain        knowledgePoint[] @relation("MetadataToKnowledgePointChain")
  currentKnowledgePointIndex Int
}

model Message {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  role            role
  rk              String[]
  content         String? // Make content optional
  splitResponse   SplitResponse?   @relation(fields: [splitResponseId], references: [id])
  splitResponseId String?          @unique @db.ObjectId
  eliResponseType eliResponseType?
  ls              lessonState?     @relation("LessonStateToMessage", fields: [lessonStateId], references: [id])
  lsO             lessonState?     @relation("LessonStateToOldMessage", fields: [lessonStateId], references: [id])
  lessonStateId   String           @db.ObjectId

  @@map("messages")
}

model SplitResponse {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  text    String
  active  Boolean
  message Message?

  @@map("split_responses")
}

enum eliResponseType {
  General
  WhatComesToMind
  ChallengeQ
  System
}

enum role {
  user
  eli
}

model Tip {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  content String
  link    String

  @@map("tips")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  role                String?          @default("STUDENT") @db.String
  username            String           @unique
  email               String           @unique
  password            String
  name                String           @default("") @map("_name")
  lessons             Lesson[]
  isPremium           Boolean          @default(false)
  // sessions                  Session[]
  //collection id or something? idk
  knowledgePoints     knowledgePoint[] @relation("UserToKnowledgePoint")
  lastCreatedLessonAt DateTime?

  @@map("users")
}

model knowledgePoint {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation("UserToKnowledgePoint", fields: [userId], references: [id])
  userId     String   @map("_userId") @db.ObjectId
  KP         String   @map("_KP") //string knowledge point
  TwoDvK     Float[]  @map("_2DvK") // 2D vector
  vKP        Float[]  @map("_vKP") // vector embedding knowledge point
  confidence Int      @map("_confidence")
  source     kpSource //differentiate between reinforced and offered points
  // linksTo         String[]

  @@map("knowledgePoints")
}

enum kpSource {
  reinforced
  offered
}

model Lesson {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  stage     Stage     @default(purgatory)
  subject   String?
  messages  Message[] @relation("LessonToMessage")
  targetQ   TargetQ?  @relation("LessonToTargetQ", fields: [targetQId], references: [id])
  targetQId String?   @unique @db.ObjectId
  beganAt   DateTime  @default(now())
  endedAt   DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId

  @@map("lessons")
}

model TargetQ {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  point  String
  TwoDvK Float[]
  lesson Lesson? @relation("LessonToTargetQ")

  @@map("targetQs")
}

model Message {
  //one target Q per lesson
  id                              String           @id @default(auto()) @map("_id") @db.ObjectId
  role                            role
  content                         String? // Make content optional
  eliResponseType                 eliResponseType?
  distanceAwayFromFinishingLesson Int?
  metadata                        Metadata?        @relation("MessageToMetadata", fields: [metadataId], references: [id])
  metadataId                      String?          @unique @db.ObjectId
  Lesson                          Lesson           @relation("LessonToMessage", fields: [lessonId], references: [id])
  lessonId                        String           @db.ObjectId

  @@map("messages")
}

model Metadata {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  references String[]
  imageURL   String
  message    Message? @relation("MessageToMetadata")
  messageId  String?  @db.ObjectId

  @@map("metadata")
}

enum eliResponseType {
  General
  WhatComesToMind
  System
}

enum role {
  user
  eli
}

enum Stage {
  purgatory
  main
  end
}

model Tip {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  content String
  link    String

  @@map("tips")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  role            String?          @default("STUDENT") @db.String
  username        String           @unique
  email           String           @unique
  password        String
  name            String           @default("") @map("_name")
  lessons         Lesson[]
  // sessions                  Session[]
  //collection id or something? idk
  knowledgePoints knowledgePoint[] @relation("UserToKnowledgePoint")

  @@map("users")
}

model knowledgePoint {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  uid             User     @relation("UserToKnowledgePoint", fields: [userId], references: [id])
  userId          String   @map("_userId") @db.ObjectId
  lesson          Lesson   @relation("LessonToKnowledgePoint", fields: [lessonId], references: [id])
  lessonId        String   @map("_lessonId") @db.ObjectId
  pointInSolitude String   @map("_pointInSolitude")
  pointInChain    String   @map("_pointInChain")
  source          kpSource @map("_source")
  TwoDCoOrdinates Float[]  @map("_TwoDCoOrdinates")
  vectorEmbedding Float[]  @map("_vectorEmbedding")
  confidence      Int      @map("_confidence")
  meta            metadata @relation("MetadataToKnowledgePoint", fields: [metadataId], references: [id])
  metadataId      String   @db.ObjectId
}

enum kpSource {
  reinforced
  offered
}

model Lesson {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  subjects            String[]
  ls                  lessonState      @relation("LessonToLessonState", fields: [stateId], references: [id])
  stateId             String           @unique @db.ObjectId
  beganAt             DateTime         @default(now())
  endedAt             DateTime         @default(now())
  lessonStatus        String           @default("Active")
  user                User             @relation(fields: [userId], references: [id])
  userId              String           @db.ObjectId
  //an array of knowledge point IDs
  knowledgePointChain knowledgePoint[] @relation("LessonToKnowledgePoint")

  @@map("lessons")
}

model lessonState {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  messages   Message[] @relation("LessonStateToMessage")
  metadata   metadata  @relation("LessonStateToMetadata", fields: [metadataId], references: [id])
  metadataId String    @unique @db.ObjectId
  Lesson     Lesson?   @relation("LessonToLessonState")

  @@map("lessonStates")
}

model metadata {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  lessonState   lessonState? @relation("LessonStateToMetadata")
  lessonStateId String       @unique @db.ObjectId
  threads       Json         @db.Json
  subjects      String[]

  knowledgePointChain        knowledgePoint[] @relation("MetadataToKnowledgePoint")
  currentKnowledgePointIndex Int
}

model Message {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  role            role
  rk              String[]
  content         String
  eliResponseType eliResponseType?
  ls              lessonState      @relation("LessonStateToMessage", fields: [lessonStateId], references: [id])
  lessonStateId   String           @db.ObjectId

  @@map("messages")
}

enum eliResponseType {
  General
  WhatComesToMind
  ChallengeQ
  SubjectIntroduction
}

enum role {
  user
  eli
}

model Tip {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  content String
  link    String

  @@map("tips")
}
